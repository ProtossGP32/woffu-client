name: CI

on:
  push:
    branches:
      - main
      - 'feat/**'
    # Trigger workflow on tag push explicitly
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test ${{ matrix.os }} / Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      # Checkout repo so that test code and pyproject.toml are available

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Run tests
        run: pytest -v --maxfail=1 --disable-warnings

  set-version:
    name: Set version from tag
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      # Checkout repo so pyproject.toml exists to modify it

      - name: Extract version from tag
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF##*/}
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Update pyproject.toml version locally
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          # Version is updated locally in this job's workspace

  build:
    name: Build ${{ matrix.os }} / Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    needs: [test, set-version]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
        # Checkout repo here is required so pyproject.toml and source code exist.
        # The workspace already includes the updated pyproject.toml from set-version via `needs`.

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: build-pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            build-pip-${{ runner.os }}-${{ matrix.python }}-

      - name: Cache built artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-dist-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            build-dist-${{ runner.os }}-

      - name: Install build tools
        run: python -m pip install --upgrade pip build

      - name: Build package
        run: python -m build --sdist --wheel
        # Uses the updated pyproject.toml version

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      # Required to access pyproject.toml for generating .pypirc

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: publish-pip-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            publish-pip-${{ runner.os }}-

      - name: Install Twine and tomli
        run: python -m pip install --upgrade pip twine tomli

      - name: Download built artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Generate temporary .pypirc from pyproject.toml
        run: |
          python - <<'EOF'
          import os, tomli

          pyproject = tomli.load(open("pyproject.toml", "rb"))
          twine_repos = pyproject.get("tool", {}).get("twine", {}).get("repositories", {})
          if not twine_repos:
              raise ValueError("No repositories defined in [tool.twine.repositories]")

          lines = ["[distutils]", "index-servers = " + " ".join(twine_repos.keys())]

          for name, repo in twine_repos.items():
              url = repo.get("repository")
              username = repo.get("username", "")
              password = repo.get("password", "")

              if username.startswith("{env:") and username.endswith("}"):
                  username = os.environ.get(username[5:-1], "")
              if password.startswith("{env:") and password.endswith("}"):
                  password = os.environ.get(password[5:-1], "")

              lines.extend([f"\n[{name}]", f"repository: {url}", f"username: {username}", f"password: {password}"])

          with open(os.path.expanduser("~/.pypirc"), "w") as f:
              f.write("\n".join(lines))
          EOF

      - name: Publish with Twine
        run: python -m twine upload dist/* --config-file ~/.pypirc

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: dist/*
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
