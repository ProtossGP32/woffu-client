name: CI

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'v*.*.*'  # tags for releases
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: Test ${{ matrix.os }} / Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.10, 3.11, 3.12]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Run tests
        run: pytest -v --maxfail=1 --disable-warnings

  set-version:
    name: Set version from tag
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Extract version from tag
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF##*/}
          echo "Tag name: $TAG_NAME"
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Update pyproject.toml version
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml

      - name: Commit updated version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "Set version to ${{ steps.get_version.outputs.version }} [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF#refs/heads/} || echo "Push skipped"

  build:
    name: Build ${{ matrix.os }} / Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    needs: [test, set-version]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [3.10, 3.11, 3.12]
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: build-pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            build-pip-${{ runner.os }}-${{ matrix.python }}-

      - name: Cache built artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-dist-${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            build-dist-${{ runner.os }}-

      - name: Install build tools
        run: python -m pip install --upgrade pip build

      - name: Build package
        run: python -m build --sdist --wheel

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: publish-pip-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            publish-pip-${{ runner.os }}-

      - name: Install Twine and tomli
        run: python -m pip install --upgrade pip twine tomli

      - name: Download built artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Generate temporary .pypirc from pyproject.toml
        run: |
          python - <<'EOF'
          import os
          import tomli

          pyproject = tomli.load(open("pyproject.toml", "rb"))
          twine_repos = pyproject.get("tool", {}).get("twine", {}).get("repositories", {})
          if not twine_repos:
              raise ValueError("No repositories defined in [tool.twine.repositories]")

          pypirc_lines = ["[distutils]", "index-servers ="]
          for repo_name in twine_repos:
              pypirc_lines.append(f"    {repo_name}")

          for repo_name, repo_info in twine_repos.items():
              pypirc_lines.append(f"\n[{repo_name}]")
              url = repo_info.get("repository")
              username = repo_info.get("username", "")
              password = repo_info.get("password", "")

              if password.startswith("{env:") and password.endswith("}"):
                  env_var = password[5:-1]
                  password = os.environ.get(env_var, "")
              if username.startswith("{env:") and username.endswith("}"):
                  env_var = username[5:-1]
                  username = os.environ.get(env_var, "")

              pypirc_lines.append(f"repository: {url}")
              pypirc_lines.append(f"username: {username}")
              pypirc_lines.append(f"password: {password}")

          with open(os.path.expanduser("~/.pypirc"), "w") as f:
              f.write("\n".join(pypirc_lines))
          EOF

      - name: Publish with Twine
        run: python -m twine upload dist/* --config-file ~/.pypirc

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: dist/*
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
