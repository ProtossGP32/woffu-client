name: CI

# Cancel any in-progress workflow run for the same branch or tag
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - 'feat/**'
    # Trigger workflow on tag push explicitly
    tags:
      - 'v*.*.*'  # trigger only on tags for releases
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test ${{ matrix.os }} / Python ${{ matrix.python }}
    #runs-on: [ self-hosted, "${{ matrix.os }}" ]
    runs-on: self-hosted
    container:
      image: ubuntu:latest
    strategy:
      matrix:
        # macOS and Windows disabled to save free GitHub Actions minutes.
        # Uncomment to re-enable multi-OS testing:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        python: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      # Checkout repo so that test code and pyproject.toml are available

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Ensure pip cache directory exists
        run: mkdir -p ${{ runner.os == 'macOS' && '~/Library/Caches/pip' || '~/.cache/pip' }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ runner.os == 'macOS' && '~/Library/Caches/pip' || '~/.cache/pip' }}
          key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python }}-

      - name: Install OS dependencies
        run: |
          apt-get update && apt-get install -y sqlite3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Run tests
        run: pytest -v --maxfail=1 --disable-warnings

  set-version:
    name: Set version from tag
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    container:
      image: ubuntu:latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Extract version from tag
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF##*/}
          echo "Tag name: $TAG_NAME"
          # strip leading "v" just in case
          echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.os }} / Python ${{ matrix.python }}
    #runs-on: [ self-hosted, "${{ matrix.os }}" ]
    runs-on: self-hosted
    container:
      image: ubuntu:latest
    needs: [test, set-version]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        # macOS and Windows disabled to save free GitHub Actions minutes.
        # Uncomment to re-enable multi-OS testing:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        python: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
        # Checkout repo here is required so pyproject.toml and source code exist.

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Ensure pip cache directory exists
        run: mkdir -p ${{ runner.os == 'macOS' && '~/Library/Caches/pip' || '~/.cache/pip' }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ runner.os == 'macOS' && '~/Library/Caches/pip' || '~/.cache/pip' }}
          key: build-pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            build-pip-${{ runner.os }}-${{ matrix.python }}-

      - name: Cache built artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: build-dist-${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            build-dist-${{ runner.os }}-

      - name: Update pyproject.toml version
        shell: bash
        if: runner.os != 'Windows'
        run: |
          VERSION=${{ needs.set-version.outputs.version }}
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '' "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          else
            sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          fi
          echo "pyproject.toml updated to version $VERSION"

      - name: Update pyproject.toml version (Windows)
        shell: pwsh
        if: runner.os == 'Windows'
        run: |
          $Version = "${{ needs.set-version.outputs.version }}"
          (Get-Content pyproject.toml) |
            ForEach-Object { $_ -replace '^version = .*', "version = `"$Version`"" } |
            Set-Content pyproject.toml
          Write-Host "pyproject.toml updated to version $Version"

      - name: DEBUG - Show pyproject.toml content (Should be modified with the correct version)
        run: cat pyproject.toml

      - name: Install build tools
        run: python -m pip install --upgrade pip build

      - name: Build package
        run: python -m build --sdist --wheel
        # Uses the updated pyproject.toml version

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # Use unique artifact names per OS/Python version to avoid conflicts
          name: dist-${{ matrix.os }}-py${{ matrix.python }}
          path: dist/*
          if-no-files-found: warn
          overwrite: true

  publish:
    name: Publish Package
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    container:
      image: ubuntu:latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    env:
      # For PyPI auth
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      # For GitHub Packages auth
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO_OWNER: ${{ github.repository_owner }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Ensure pip cache directory exists
        run: mkdir -p ${{ runner.os == 'macOS' && '~/Library/Caches/pip' || '~/.cache/pip' }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ runner.os == 'macOS' && '~/Library/Caches/pip' || '~/.cache/pip' }}
          key: publish-pip-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            publish-pip-${{ runner.os }}-

      - name: Install Twine and tomli
        run: python -m pip install --upgrade pip twine tomli

      - name: Purge old merged artifacts
        run: rm -rf merged_dist

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge dist artifacts for current version
        shell: bash
        run: |
            mkdir -p merged_dist release_artifacts
            VERSION=${GITHUB_REF_NAME#v}

            # Copy canonical files for PyPI upload
            find artifacts -type f \( -name "*.whl" -o -name "*.tar.gz" \) | while read -r file; do
                base=$(basename "$file")
                if [[ "$base" == *"$VERSION"* ]]; then
                    cp "$file" "merged_dist/$base"

                    # Compute GitHub Release filename: insert matrix info before extension
                    dir=$(dirname "$file")
                    matrix_info=$(basename "$dir" | sed 's/dist-//')  # e.g. ubuntu-latest-py3.11
                    ext="${base##*.}"                                # whl or tar.gz
                    base_noext="${base%.*}"                          # remove last extension
                    if [[ "$ext" == "gz" ]]; then
                        # For tar.gz, remove both .tar.gz
                        base_noext="${base%.tar.gz}"
                        ext="tar.gz"
                    fi
                    cp "$file" "release_artifacts/${base_noext}-${matrix_info}.${ext}"
                fi
            done

            # Debug output
            echo "PyPI artifacts:"
            ls -l merged_dist
            echo "GitHub Release artifacts:"
            ls -l release_artifacts

      - name: Generate temporary .pypirc from pyproject.toml
        run: |
          python - <<'EOF'
          import os, tomli

          pyproject = tomli.load(open("pyproject.toml", "rb"))
          twine_repos = pyproject.get("tool", {}).get("twine", {}).get("repositories", {})
          if not twine_repos:
              raise ValueError("No repositories defined in [tool.twine.repositories]")

          owner = os.environ.get("REPO_OWNER", "")

          lines = ["[distutils]", "index-servers = " + " ".join(twine_repos.keys())]

          for name, repo in twine_repos.items():
              url = repo.get("repository", "")
              if "${OWNER}" in url:
                  url = url.replace("${OWNER}", owner)

              username = repo.get("username", "")
              password = repo.get("password", "")

              if username.startswith("{env:") and username.endswith("}"):
                  env_var = username[5:-1]
                  username = os.environ.get(env_var, "")
              if password.startswith("{env:") and password.endswith("}"):
                  env_var = password[5:-1]
                  password = os.environ.get(env_var, "")

              # Safe debug output
              print(f"Configured repo [{name}] → {url}")
              print(f"  username set: {'✅' if username else '❌'}")
              print(f"  password set: {'✅' if password else '❌'}")

              lines.extend([
                  f"\n[{name}]",
                  f"repository: {url}",
                  f"username: {username if name != 'pypi' else '__token__'}",
                  f"password: {'***' if password else ''}"
              ])

          with open(os.path.expanduser("~/.pypirc"), "w") as f:
              f.write("\n".join(lines))

          print("✅ .pypirc generated successfully")
          EOF

      - name: Publish canonical artifacts to PyPI
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          python -m twine upload merged_dist/*"$VERSION"*.whl merged_dist/*"$VERSION"*.tar.gz \
            --config-file ~/.pypirc --verbose

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: release_artifacts/*
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
